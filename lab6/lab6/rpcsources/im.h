/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _IM_H_RPCGEN
#define _IM_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct User {
	u_int id;
	char *name;
	char *nick;
	bool_t onlineStatus;
	bool_t isFriend;
};
typedef struct User User;

struct Message {
	User sender;
	User recipient;
	char *msg;
	bool_t read;
	u_int date;
};
typedef struct Message Message;

struct Session {
	int id;
};
typedef struct Session Session;

struct Args_login {
	char *name;
	char *passwd;
};
typedef struct Args_login Args_login;

struct Args_sendMessage {
	Session session;
	u_int recipientId;
	char *msg;
};
typedef struct Args_sendMessage Args_sendMessage;

struct Args_addUserToRoster {
	Session session;
	u_int userId;
};
typedef struct Args_addUserToRoster Args_addUserToRoster;

struct Args_deleteUserFromRoster {
	Session session;
	u_int userId;
};
typedef struct Args_deleteUserFromRoster Args_deleteUserFromRoster;

struct Args_findUser {
	Session session;
	char *name;
	char *nick;
};
typedef struct Args_findUser Args_findUser;

struct Args_register {
	char *name;
	char *nick;
	char *passwd;
};
typedef struct Args_register Args_register;

struct Status {
	bool_t stat;
	char *descr;
};
typedef struct Status Status;

struct Result_login {
	Status status;
	Session session;
	User user;
};
typedef struct Result_login Result_login;

struct Result_getUserRoster {
	Status status;
	struct {
		u_int roster_len;
		User *roster_val;
	} roster;
};
typedef struct Result_getUserRoster Result_getUserRoster;

struct Result_getMessagesHistory {
	Status status;
	struct {
		u_int messages_len;
		Message *messages_val;
	} messages;
};
typedef struct Result_getMessagesHistory Result_getMessagesHistory;

struct Result_getUnreadMessages {
	Status status;
	struct {
		u_int messages_len;
		Message *messages_val;
	} messages;
};
typedef struct Result_getUnreadMessages Result_getUnreadMessages;

struct Result_findUser {
	Status status;
	struct {
		u_int users_len;
		User *users_val;
	} users;
};
typedef struct Result_findUser Result_findUser;

struct Result_getFriendshipRequests {
	Status status;
	struct {
		u_int users_len;
		User *users_val;
	} users;
};
typedef struct Result_getFriendshipRequests Result_getFriendshipRequests;

#define IM_MESSENGER 0x28091993
#define VER 3

#if defined(__STDC__) || defined(__cplusplus)
#define login 1
extern  Result_login * login_3(Args_login *, CLIENT *);
extern  Result_login * login_3_svc(Args_login *, struct svc_req *);
#define getUserRoster 2
extern  Result_getUserRoster * getuserroster_3(Session *, CLIENT *);
extern  Result_getUserRoster * getuserroster_3_svc(Session *, struct svc_req *);
#define getMessagesHistory 3
extern  Result_getMessagesHistory * getmessageshistory_3(Session *, CLIENT *);
extern  Result_getMessagesHistory * getmessageshistory_3_svc(Session *, struct svc_req *);
#define getUnreadMessages 4
extern  Result_getUnreadMessages * getunreadmessages_3(Session *, CLIENT *);
extern  Result_getUnreadMessages * getunreadmessages_3_svc(Session *, struct svc_req *);
#define sendMessage 5
extern  Status * sendmessage_3(Args_sendMessage *, CLIENT *);
extern  Status * sendmessage_3_svc(Args_sendMessage *, struct svc_req *);
#define addUserToRoster 6
extern  Status * addusertoroster_3(Args_addUserToRoster *, CLIENT *);
extern  Status * addusertoroster_3_svc(Args_addUserToRoster *, struct svc_req *);
#define deleteUserFromRoster 7
extern  Status * deleteuserfromroster_3(Args_deleteUserFromRoster *, CLIENT *);
extern  Status * deleteuserfromroster_3_svc(Args_deleteUserFromRoster *, struct svc_req *);
#define findUser 8
extern  Result_findUser * finduser_3(Args_findUser *, CLIENT *);
extern  Result_findUser * finduser_3_svc(Args_findUser *, struct svc_req *);
#define getFriendshipRequests 9
extern  Result_getFriendshipRequests * getfriendshiprequests_3(Session *, CLIENT *);
extern  Result_getFriendshipRequests * getfriendshiprequests_3_svc(Session *, struct svc_req *);
#define signup 10
extern  Status * signup_3(Args_register *, CLIENT *);
extern  Status * signup_3_svc(Args_register *, struct svc_req *);
extern int im_messenger_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define login 1
extern  Result_login * login_3();
extern  Result_login * login_3_svc();
#define getUserRoster 2
extern  Result_getUserRoster * getuserroster_3();
extern  Result_getUserRoster * getuserroster_3_svc();
#define getMessagesHistory 3
extern  Result_getMessagesHistory * getmessageshistory_3();
extern  Result_getMessagesHistory * getmessageshistory_3_svc();
#define getUnreadMessages 4
extern  Result_getUnreadMessages * getunreadmessages_3();
extern  Result_getUnreadMessages * getunreadmessages_3_svc();
#define sendMessage 5
extern  Status * sendmessage_3();
extern  Status * sendmessage_3_svc();
#define addUserToRoster 6
extern  Status * addusertoroster_3();
extern  Status * addusertoroster_3_svc();
#define deleteUserFromRoster 7
extern  Status * deleteuserfromroster_3();
extern  Status * deleteuserfromroster_3_svc();
#define findUser 8
extern  Result_findUser * finduser_3();
extern  Result_findUser * finduser_3_svc();
#define getFriendshipRequests 9
extern  Result_getFriendshipRequests * getfriendshiprequests_3();
extern  Result_getFriendshipRequests * getfriendshiprequests_3_svc();
#define signup 10
extern  Status * signup_3();
extern  Status * signup_3_svc();
extern int im_messenger_3_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_User (XDR *, User*);
extern  bool_t xdr_Message (XDR *, Message*);
extern  bool_t xdr_Session (XDR *, Session*);
extern  bool_t xdr_Args_login (XDR *, Args_login*);
extern  bool_t xdr_Args_sendMessage (XDR *, Args_sendMessage*);
extern  bool_t xdr_Args_addUserToRoster (XDR *, Args_addUserToRoster*);
extern  bool_t xdr_Args_deleteUserFromRoster (XDR *, Args_deleteUserFromRoster*);
extern  bool_t xdr_Args_findUser (XDR *, Args_findUser*);
extern  bool_t xdr_Args_register (XDR *, Args_register*);
extern  bool_t xdr_Status (XDR *, Status*);
extern  bool_t xdr_Result_login (XDR *, Result_login*);
extern  bool_t xdr_Result_getUserRoster (XDR *, Result_getUserRoster*);
extern  bool_t xdr_Result_getMessagesHistory (XDR *, Result_getMessagesHistory*);
extern  bool_t xdr_Result_getUnreadMessages (XDR *, Result_getUnreadMessages*);
extern  bool_t xdr_Result_findUser (XDR *, Result_findUser*);
extern  bool_t xdr_Result_getFriendshipRequests (XDR *, Result_getFriendshipRequests*);

#else /* K&R C */
extern bool_t xdr_User ();
extern bool_t xdr_Message ();
extern bool_t xdr_Session ();
extern bool_t xdr_Args_login ();
extern bool_t xdr_Args_sendMessage ();
extern bool_t xdr_Args_addUserToRoster ();
extern bool_t xdr_Args_deleteUserFromRoster ();
extern bool_t xdr_Args_findUser ();
extern bool_t xdr_Args_register ();
extern bool_t xdr_Status ();
extern bool_t xdr_Result_login ();
extern bool_t xdr_Result_getUserRoster ();
extern bool_t xdr_Result_getMessagesHistory ();
extern bool_t xdr_Result_getUnreadMessages ();
extern bool_t xdr_Result_findUser ();
extern bool_t xdr_Result_getFriendshipRequests ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_IM_H_RPCGEN */
